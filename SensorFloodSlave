#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <esp_sleep.h>

#define WIFI_SSID "OPPO A53"
#define WIFI_PASSWORD "123Police"
#define BOT_TOKEN "8089902347:AAHqNmexNF_7aD6fn1c7R-rNUbBs71sKxYI"
#define CHAT_ID "-1001631198478"

// –ü–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (24 —á–∞—Å–∞ –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö)
#define STATUS_INTERVAL 24 * 60 * 60 * 1000000ULL

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç–∞—Ä–µ–∏
#define BATTERY_PIN 34          // –ü–∏–Ω –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
#define VOLTAGE_DIVIDER 2.0     // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ–ª–∏—Ç–µ–ª—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
#define MAX_BATTERY_VOLTAGE 4.2 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω–Ω–æ–π –±–∞—Ç–∞—Ä–µ–∏
#define MIN_BATTERY_VOLTAGE 3.0 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞–∑—Ä—è–¥–æ–º

const unsigned long BOT_MTBS = 1000;
WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long bot_lasttime;
bool R = false;  // –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è (false = —Å—É—Ö–æ, true = —Ç–æ–Ω–µ–º)
bool wakeFromSleep = false; // –§–ª–∞–≥ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –æ—Ç —Å–Ω–∞
uint64_t lastStatusTime = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞

float readBatteryVoltage() {
  int rawValue = analogRead(BATTERY_PIN);
  float voltage = rawValue * (3.3 / 4095.0) * VOLTAGE_DIVIDER;
  return voltage;
}

int calculateBatteryPercentage(float voltage) {
  // –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –¥–ª—è Li-ion
  voltage = constrain(voltage, MIN_BATTERY_VOLTAGE, MAX_BATTERY_VOLTAGE);
  int percentage = (int)((voltage - MIN_BATTERY_VOLTAGE) / (MAX_BATTERY_VOLTAGE - MIN_BATTERY_VOLTAGE) * 100);
  return percentage;
}

void handleNewMessages(int numNewMessages) {
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;
    String from_name = bot.messages[i].from_name;
    
    if (from_name == "") from_name = "Guest";

    // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –ª—é–±–∞—è –∫–æ–º–∞–Ω–¥–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ "–¢–æ–Ω–µ–º"
    if (text.length() > 0) {
      R = false;
      Serial.println("–û–±–Ω—É–ª–∏–ª–∏ —Ñ–ª–∞–≥ '–¢–æ–Ω–µ–º'");
      bot.sendMessage(CHAT_ID, "–û–±–Ω—É–ª–∏–ª–∏ üòÄ", "");
    }
  }
}

void connectWiFi() {
  Serial.begin(9600);
  Serial.println();
  Serial.print("Connecting to WiFi SSID ");
  Serial.print(WIFI_SSID);
  
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());
  
  Serial.print("Retrieving time: ");
  configTime(0, 0, "pool.ntp.org");
  time_t now = time(nullptr);
  while (now < 24 * 3600) {
    Serial.print(".");
    delay(100);
    now = time(nullptr);
  }
  Serial.println(now);
}

void sendStatus() {
  float voltage = readBatteryVoltage();
  int percentage = calculateBatteryPercentage(voltage);
  
  String status = R ? "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: –¢–æ–Ω–µ–º! üò≠" : "‚úÖ –°—Ç–∞—Ç—É—Å: –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ üòä";
  status += "\nüîã –ë–∞—Ç–∞—Ä–µ—è: " + String(voltage, 2) + "V (" + String(percentage) + "%)";
  
  bot.sendMessage(CHAT_ID, status, "");
  lastStatusTime = esp_timer_get_time();
}

void goToSleep() {
  Serial.println("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª—É–±–æ–∫–∏–π —Å–æ–Ω...");
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –ø–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—é –æ—Ç –ø–∏–Ω–∞ 5 (LOW —É—Ä–æ–≤–µ–Ω—å)
  esp_sleep_enable_ext0_wakeup(GPIO_NUM_5, LOW);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
  uint64_t sleepTime = STATUS_INTERVAL;
  if (lastStatusTime > 0) {
    uint64_t timeSinceLastStatus = esp_timer_get_time() - lastStatusTime;
    if (timeSinceLastStatus < STATUS_INTERVAL) {
      sleepTime = STATUS_INTERVAL - timeSinceLastStatus;
    }
  }
  esp_sleep_enable_timer_wakeup(sleepTime);
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª—É–±–æ–∫–∏–π —Å–æ–Ω
  esp_deep_sleep_start();
}

void setup() {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
  wakeFromSleep = (esp_sleep_get_wakeup_cause() != ESP_SLEEP_WAKEUP_UNDEFINED);
  
  pinMode(5, INPUT_PULLUP);  // –ö–Ω–æ–ø–∫–∞/–¥–∞—Ç—á–∏–∫ –Ω–∞ GPIO5 (–ø–æ–¥—Ç—è–∂–∫–∞ –∫ VCC)
  pinMode(BATTERY_PIN, INPUT); // –ü–∏–Ω –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
  
  if (wakeFromSleep) {
    // –ï—Å–ª–∏ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å –æ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_EXT0) {
      R = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ "–¢–æ–Ω–µ–º"
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WiFi —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    connectWiFi();
    
    // –ï—Å–ª–∏ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å –ø–æ —Ç–∞–π–º–µ—Ä—É - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
      sendStatus();
    }
    
    // –ï—Å–ª–∏ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å –æ—Ç –¥–∞—Ç—á–∏–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–∏
    if (R) {
      bot.sendMessage(CHAT_ID, "–¢–æ–Ω–µ–º! üò≠", "");
    }
  } else {
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –∏–∑ —Å–Ω–∞)
    connectWiFi();
    sendStatus();
  }
}

void loop() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
  if (millis() - bot_lasttime > BOT_MTBS) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    if (numNewMessages > 0) {
      handleNewMessages(numNewMessages);
    }
    bot_lasttime = millis();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞/–∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å –æ—Ç –Ω–µ–≥–æ)
  if (!wakeFromSleep || esp_sleep_get_wakeup_cause() != ESP_SLEEP_WAKEUP_EXT0) {
    bool sensorState = digitalRead(5);  // –ß–∏—Ç–∞–µ–º GPIO5
    
    if (!R && sensorState == LOW) {  // –ï—Å–ª–∏ –±—ã–ª–æ "—Å—É—Ö–æ", –Ω–æ –¥–∞—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª (LOW, —Ç.–∫. PULLUP)
      Serial.println("–¢–æ–Ω–µ–º!");
      R = true;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
      bot.sendMessage(CHAT_ID, "–¢–æ–Ω–µ–º! üò≠", "");
    }
  }

  // –ï—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
  if (esp_timer_get_time() - lastStatusTime >= STATUS_INTERVAL) {
    sendStatus();
  }

  // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ–Ω
  static unsigned long lastActivity = millis();
  if (millis() - lastActivity > 30000) {
    goToSleep();
  }
  lastActivity = millis();
}
